name: Compare Versions
description: Fetch the latest version from PyPI and compare it with the new version.
inputs:
  package_name:
    description: The name of the package on PyPI.
    required: true
  new_version:
    description: The new version to compare.
    required: true
outputs:
  is_newer:
    value: ${{ steps.compare_versions.outputs.is_newer }}
    description: Whether the new version is greater than the latest version on PyPI.
runs:
  using: "composite"
  steps:
    - name: Fetch latest version from PyPI
      id: fetch_latest
      shell: bash
      run: |
        response=$(curl -s https://pypi.org/pypi/${{ inputs.package_name }}/json || echo "{}")
        latest_previous_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
        if [ -z "$latest_previous_version" ]; then
          latest_previous_version="0.0.0"
        fi
        echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

    - name: compare_versions
      id: compare_versions
      shell: bash
      run: |
        if [ "$(printf '%s\n' "$latest_previous_version" "${{ inputs.new_version }}" | sort -rV | head -n 1)" != "${{ inputs.new_version }}" ] || [ "${{ inputs.new_version }}" == "$latest_previous_version" ]; then
          echo "is_newer=false" >> $GITHUB_OUTPUT
        else
          echo "is_newer=true" >> $GITHUB_OUTPUT
        fi
